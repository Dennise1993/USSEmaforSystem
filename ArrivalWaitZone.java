import java.util.LinkedList;
/**
 * Arrival wait zone where cargo ships generated by producer
 * are going to be sent.
 *  
 * @author Zhijin Li 766041
 *
 */
public class ArrivalWaitZone {
	
	// ships that arrival wait zone holds
	volatile private LinkedList<Ship> ships = new LinkedList<Ship>();
	// the number of parking spots of the arrival zone 
	private int numParkingSpots;
	
	public ArrivalWaitZone(int numParkingSpots) {
		this.numParkingSpots = numParkingSpots;
	}
	
	/*
	 * get the number of pilots who are in the wait zone 
	 * and have acquired ships
	 */
	synchronized private int numOfPilotsInArrivalZone() {
		int num = 0;		
		for(Ship ship: ships) {
			if(ship.getPilot() != null) {
				num++;
			}
		}		
		return num;
	}
	
	// pilot acquires ship
	synchronized public void acquireShip(Pilot pilot) {
		Ship ship = null;
		while(ships.size() == numOfPilotsInArrivalZone()) {
			/*
			 * there is no available ship in the arrival zone, 
			 * tell pilots to wait
			 */			
			try {
				wait();
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
		
		// if there is any ship in wait zone, find one without pilot
		for(Ship ship_temp: ships) {
			if(ship_temp.getPilot() == null) {
				ship = ship_temp;
				ship.setPilot(pilot);
				pilot.setShip(ship);
				
				System.out.println(pilot.toString() + " acquires " 
						+ ship.toString() + ".");
				break;
			}
		}
		// after acquiring ship, pilot continues acquiring tugs for docking		
	}

	/*
	 * after acquiring tugs for docking, pilot takes ship out of 
	 * wait zone and depart
	 */
	synchronized public void depart(Pilot pilot) {
		Ship ship; 
		if (pilot.getShip() == null 
				|| pilot.getShip().getNumTugs()!= Params.DOCKING_TUGS) {
			System.out.println("ERROR---pilot has no ship or "
					+ "doesn't have correct number of tugs.");
			return;
		}
		
		ship = pilot.getShip();
		ships.remove(ship);
		
		// tell producer to put ship in arrival wait zone
		notifyAll();
	}

	// producer puts ships in arrival zone
	synchronized public void arrive(Ship ship) {
		while(ships.size() == numParkingSpots) {
			// there is no available parking spot now, tell producer to wait
			try {
				wait();
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
		
		ships.addLast(ship);
		
		// tell all pilots that ship is there, grab it.
		notifyAll(); 
		System.out.println(ship.toString() + " arrives at arrival zone.");
		
	}	

}
